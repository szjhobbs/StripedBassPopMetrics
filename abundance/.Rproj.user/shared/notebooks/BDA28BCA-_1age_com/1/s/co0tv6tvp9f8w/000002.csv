"0",""
"0","# TODO: acknowledge sample() in final step"
"0",""
"0","catch$AgeAssign <- lapply(catch[[""BySex""]], FUN = function(d) {"
"0","  lapply(d[[""Data""]], FUN = function(dd) {"
"0","    "
"0","    # desired fields for analytics"
"0","    cols <- c("
"0","      ""TagNum"", ""CapMethod"", ""RelFL"","
"0","    "
"0","    # for now return NULL if no data"
"0","    if (nrow(dd) == 0) return(NULL)"
"0","    "
"0","    # need to expand data on `Count` field to get complete number of fish"
"0","    o <- data.frame("
"0","      lapply(dd[cols], FUN = rep, times = dd[[""Count""]]),"
"0","    )"
"0","    "
"0","    r <- c(0, 0)"
"0","    if (!all(is.na(o[[""RelFL""]])))"
"0","      r <- range(o[[""RelFL""]], na.rm = TRUE)"
"0","    lb <- seq(from = r[[1]], to = r[[2]] + 1, by = 1)"
"0","    # assign ages to each fish - need to employee `set.seed` but how"
"0","    a <- AgeEach(data = o, len = RelFL, age = RelAge0, lenBreaks = lb)"
"0","    "
"0","    # check for which ages are still NA post call to AgeEach()"
"0","    b_age_na <- is.na(a[[""Ages""]])"
"0","    # now check if any ages are still NA, if yes then employ AgeAssign"
"0","    if (any(b_age_na)) {"
"0","      "
"0","      # create len-frequency where ages are missing (NA)"
"0","      lf <- table(o[b_age_na, ""RelFL""], useNA = ""ifany"")"
"0","      if (dim(lf) != 0) {"
"0","        "
"0","        # used to keep order in tact with `o`"
"0","        ord <- lapply(names(lf), FUN = function(x) {"
"0","        ord <- order(unlist(ord, use.names = FALSE))"
"0","    "
"0","        age_assign <- mapply("
"0","          len = names(lf),"
"0","          size = lf,"
"0","          MoreArgs = list(alk = qalk, setSeed = 123),"
"0","          SIMPLIFY = FALSE"
"0","        )"
"0","        "
"0","        # unlist to get vector of ages"
"0","        age_assign <- unlist(age_assign, use.names = FALSE)[ord]"
"0","        "
"0","    b_age_na <- is.na(a[[""Ages""]])"
"0","    "
"0","    nn <- nrow(o)"
"0","    both <- sum(b_age_na | is.na(o[[""RelFL""]]))"
"0","    n_age <- length(unique(a[[""Ages""]][!b_age_na]))"
"0","    "
"0","    span <- 0.75"
"0","    if (n_age < 6) span <- 0.9"
"0","    "
"0","    # greater then 10, then perform loess to continue assigning ages"
"0","      "
"0","      mod <- loess(formula = a[[""Ages""]] ~ o[[""RelFL""]], span = span)"
"0","        newdata = o[b_age_na, ""RelFL"", drop = TRUE]"
"0","      )"
"0","      a[[""Ages""]][b_age_na] <- ceiling(loess_ages)"
"0","    }"
"0","    # end loess"
"0","    "
"0","    "
"0","    if (any(b_age_na)) {"
"0","      "
"0","      # using b will still leave some fish without an age - these fish have"
"0","      # lengths not in any length bin with ages; but here we use b_age_na, which"
"0","      # b <- is.na(a[[""Ages""]]) & (is.na(o[[""RelFL""]]) | o[[""RelFL""]] < 22)"
"0","      # n <- sum(b)"
"0","      "
"0","      sa <- sample(pa, size = n, replace = TRUE, prob = p)"
"0","      a[[""Ages""]][b_age_na] <- sa"
"0","    }"
"0","    "
"0","    # could check again but at this point all should be aged, issue message just FYI"
"0","    b_age_na <- is.na(a[[""Ages""]])"
"0","    o"
"0","  # end inner lapply"
"0","})"
"0","# end outer lapply"
"0",""
