"0",""
"0","# TODO: acknowledge sample() in final step"
"0",""
"0","catch$AgeAssign <- lapply(catch[[""BySex""]], FUN = function(d) {"
"0","  lapply(d[[""Data""]], FUN = function(dd) {"
"0","    "
"0","    # desired fields for analytics"
"0","    cols <- c("
"0","      ""TagActionF"", ""RelAge0"", ""LenCat"""
"0","    )"
"0","    if (nrow(dd) == 0) return(NULL)"
"0","    o <- data.frame("
"0","      lapply(dd[cols], FUN = rep, times = dd[[""Count""]]),"
"0","      stringsAsFactors = FALSE"
"0","    )"
"0","    "
"0","    # find fork length range to use in length breaks for `AgeEach`; fork length"
"0","    if (!all(is.na(o[[""RelFL""]])))"
"0","      r <- range(o[[""RelFL""]], na.rm = TRUE)"
"0","    # set.seed(seed = 456)"
"0","    a <- AgeEach(data = o, len = RelFL, age = RelAge0, lenBreaks = lb)"
"0","    b_age_na <- is.na(a[[""Ages""]])"
"0","    "
"0","    # now check if any ages are still NA, if yes then employ AgeAssign"
"0","    if (any(b_age_na)) {"
"0","      "
"0","      # create len-frequency where ages are missing (NA)"
"0","        "
"0","        # used to keep order in tact with `o`"
"0","        ord <- lapply(names(lf), FUN = function(x) {"
"0","          which(o[b_age_na, ""RelFL""] %in% as.numeric(x))"
"0","        })"
"0","        "
"0","        # does not work properly without call to `order()`"
"0","        ord <- order(unlist(ord, use.names = FALSE))"
"0","    "
"0","        # uses qalk to assign age to fish with length (in qalk)"
"0","        age_assign <- mapply("
"0","          FUN = AgeAssign,"
"0","          len = names(lf),"
"0","          MoreArgs = list(alk = qalk, setSeed = 123),"
"0","        "
"0","        age_assign <- unlist(age_assign, use.names = FALSE)[ord]"
"0","        # re-assign to original age vector"
"0","      }"
"0","      # end dim check"
"0","    }"
"0","    "
"0","    # now recheck with ages are still NA"
"0","    b_age_na <- is.na(a[[""Ages""]])"
"0","    nn <- nrow(o)"
"0","    n_age <- length(unique(a[[""Ages""]][!b_age_na]))"
"0","    "
"0","    # needed to get loess to compute without warning (default span = 0.75)"
"0","    # if number of records (i.e., pairs where Age & Len are available) is"
"0","    # greater then 10, then perform loess to continue assigning ages"
"0","      "
"0","      mod <- loess(formula = a[[""Ages""]] ~ o[[""RelFL""]], span = span)"
"0","      # nd <- o[b_age_na, ""RelFL"", drop = TRUE]"
"0","        newdata = o[b_age_na, ""RelFL"", drop = TRUE]"
"0","      )"
"0","      "
"0","      a[[""Ages""]][b_age_na] <- ceiling(loess_ages)"
"0","    }"
"0","    # end loess"
"0","    "
"0","    # check again"
"0","    b_age_na <- is.na(a[[""Ages""]])"
"0","    "
"0","    if (any(b_age_na)) {"
"0","      "
"0","      # using b will still leave some fish without an age - these fish have"
"0","      # lengths not in any length bin with ages; but here we use b_age_na, which"
"0","      # will assign an age to all remaining non-aged fish"
"0","      # n <- sum(b)"
"0","      p <- prop.table(table(a[[""Ages""]]))"
"0","      a[[""Ages""]][b_age_na] <- sa"
"0","    "
"0","    # could check again but at this point all should be aged, issue message just FYI"
"0","    b_age_na <- is.na(a[[""Ages""]])"
"0","    "
"0","    if (any(b_age_na)) {"
"0","      msg <- sprintf(fmt = ""%s fish have no age."", sum(b_age_na))"
"0","    "
"0","    # include in dataframe for output & next steps"
"0","    o$Aged <- a[[""Ages""]]"
"0","    o"
"0","  })"
"0","})"
"0","# end outer lapply"
"0",""
