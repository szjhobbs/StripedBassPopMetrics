"0",""
"0","# chunk splits census data based on creel year, month, type, main-id, & catch to"
"0","# make easier the task of including or not including dup records (not all dup"
"0","# records should be removed)"
"0",""
"0","# subset to include only striped bass (species 1)"
"0","cc_split <- Split("
"0","  data = Tagging[[""CreelCensus""]],"
"0","  subset = Species %in% 1,"
"0","  vars = c(Date, Anglers, Catch, LenSexCount, Dup),"
"0","  # splitVars = c(CYear, Month, Type),"
"0","  splitVars = c(CYear, Month, Type, MainID, Catch),"
"0","  drop = TRUE"
"0",")"
"0",""
"0","cols_num <- c(""CYear"", ""Month"", ""MainID"", ""Catch"")"
"0",""
"0","# for convenience of desired data type"
"0","cc_split[cols_num] <- lapply(cc_split[cols_num], FUN = as.numeric)"
"0",""
"0","# add record count for information & to assist with troubleshooting as needed"
"0","cc_split$Rec <- vapply("
"0","  cc_split[[""Data""]],"
"0","  FUN = nrow,"
"0","  FUN.VALUE = numeric(1L)"
"0",")"
"0",""
"0","# convoluted but basically sums catch if no dups detected OR if catch is < 12"
"0","# (as best I could tell 11 or 12 is the magic cutoff for when --- in the old"
"0","# system --- len & sex data would continue on the next line (thus the"
"0","# duplication in catch (or rows with catch)); could be a better way to do this"
"0","# but I've already spent a decent amount of time trying to reconcile numbers &"
"0","# must move on - this I believe gets close to previously crunched numbers. The"
"0","# final step --- if catch >= 12 and dups exist is to sum all catch & number"
"0","# measured and (or) sexed, get the difference, sum catch for duplicate records,"
"0","# then subtract difference from the sum adding number measured and (or) sexed -"
"0","# convoluted, yes, but seems to work"
"0","cc_split$CatchSum <- vapply(cc_split[[""Data""]], FUN = function(d) {"
"0","  "
"0","  if (all(!d[[""Dup""]]) || all(d[[""Catch""]] < 12))"
"0","    return(sum(d[[""Catch""]]))"
"0","  "
"0","  # to variable b for convenience"
"0","  b <- d[[""Dup""]]"
"0","  "
"0","  x <-  sum(d[[""Catch""]], na.rm = TRUE)"
"0","  y <-  sum(d[[""LenSexCount""]], na.rm = TRUE)"
"0","  "
"0","  r <- x - y"
"0","  "
"0","  # sum of catch for duplicated records"
"0","  p <- sum(d[b, ""Catch""], na.rm = TRUE)"
"0","  "
"0","  # final output"
"0","  (r - p) + y"
"0","  "
"0","}, FUN.VALUE = numeric(1L))"
"0",""
"0","# clean up"
"0","rm(cols_num)"
"0",""
"0","# ******************************************************************************"
"0","# for testing: uncomment as needed to look at catch by MainID (the identifier"
"0","# for date, port, timestart, timeend)"
"0",""
"0","# cc_split <- Split("
"0","#   data = Tagging[[""CreelCensus""]],"
"0","#   subset = Species %in% 1,"
"0","#   splitVars = c(MainID, Catch),"
"0","#   drop = TRUE"
"0","# )"
"0","# "
"0","# cc_split$Check <- vapply(cc_split[[""Data""]], FUN = function(d) {"
"0","#   any(d[[""Dup""]]) & !any(d[[""LenSexCount""]] %in% 11)"
"0","# }, FUN.VALUE = logical(1L))"
"0","# "
"0","# cc_split$Check2 <- vapply(cc_split[[""Data""]], FUN = function(d) {"
"0","#   any(d[[""Catch""]] >= 12)"
"0","# }, FUN.VALUE = logical(1L))"
"0","# ******************************************************************************"
"0",""
