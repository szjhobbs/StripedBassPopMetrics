"0",""
"0","# creel[[""Recaps""]][[y]][[""bay""]][a, y, ""m""]"
"0",""
"0","# catch$RvrR <- lapply(catch[[""RelYear""]], function(y) {"
"0","#     "
"0","#     a <- c(3:7, ""8p"")"
"0","#     n <- length(a)"
"0","#     "
"0","#     # for looping below"
"0","#     sex <- c(m = 'm', f = 'f')"
"0","#     "
"0","#     Y <- 0:4"
"0","#     "
"0","#     y0 <- as.character(y)"
"0","#     "
"0","#     lapply(sex, FUN = function(s) {"
"0","#         "
"0","#         out <- vapply(Y, FUN = function(i) {"
"0","#             y <- as.character(y - i)"
"0","#             # if (i > 0) a <- a[-c(1:i, n)]"
"0","#             if (i > 0) a <- a[-c((n - i):n)]"
"0","#             "
"0","#             dn <- dimnames(creel[[""Recaps""]][[y0]][[""rvr""]][a, , s])[[2]]"
"0","#             "
"0","#             if (!y %in% dn) {"
"0","#                 e <- vector(mode = ""numeric"", length = n)"
"0","#                 e <- setNames(object = e, nm = c(3:7, ""8p""))"
"0","#                 return(e)"
"0","#             }"
"0","#             "
"0","#             RR <- creel[[""Recaps""]][[y0]][[""rvr""]][a, y, s]"
"0","#             "
"0","#             if (length(a) < n) RR[(length(a) + 1):n] <- 0"
"0","#             RR"
"0","#             "
"0","#         }, FUN.VALUE = numeric(6L))"
"0","#         # end vapply"
"0","#         "
"0","#         dimnames(out)[[2]] <- y - Y"
"0","#         out"
"0","#     })"
"0","#     # end inner lapply"
"0","# })"
"0","# # end outer lapply"
"0",""
"0","catch$RvrR <- lapply(catch[[""RelYear""]], FUN = function(y) {"
"0","  "
"0","  # res loops through all recaps from creel census to get appropriate recaptures"
"0","  # from mark-recapture release year (RelYear)"
"0","  res <- lapply(creel[[""Recaps""]], function(r) {"
"0","    "
"0","    # loops through each year of creel recaps"
"0","    out <- lapply(r, FUN = function(cc) {"
"0","      "
"0","      # to get release year (y) from recaptured data (`cc` is an array with"
"0","      # `ages` x `release year` x `sex`)"
"0","      yr <- as.numeric(dimnames(cc)[[""Year""]])"
"0","      b <- yr %in% y"
"0","      "
"0","      a <- c(3:7, ""8p"")"
"0","      "
"0","      # if there are no matches with `y` then return NULL (b should only sum to"
"0","      # 1, as there should be no more then 1 release year within recapture data"
"0","      # but may want to put a check on this - 10-Jun-2020)"
"0","      # if (ncol(o) == 0) return(NULL)"
"0","      # if (all(!b)) return(NULL)"
"0","      if (all(!b)) {"
"0","        "
"0","        na <- matrix("
"0","          data = 0,"
"0","          ncol = 2,"
"0","          nrow = length(a),"
"0","          dimnames = list(Aged = a, Sex = c('m', 'f'))"
"0","        )"
"0","        "
"0","        return(as.table(na))"
"0","      }"
"0","      "
"0","      # return only the appropriate year with only ages 3-8+"
"0","      cc[a, b, ]"
"0","    })"
"0","    # end inner lapply"
"0","    "
"0","    # output has both bay & river creel data, but for this purpose we will work"
"0","    # with one creel type at a time"
"0","    out[[""rvr""]]"
"0","  })"
"0","  # end inner lapply"
"0",""
"0","  # to loop through males & females"
"0","  lapply(c(m = 'm', f = 'f'), FUN = function(s) {"
"0","    "
"0","    # used in Map to decided which year is the initial estimate & which years"
"0","    # are updates"
"0","    index <- as.numeric(names(res)) - y"
"0","    "
"0","    # return(index)"
"0","    # if (!index %in% 0:4) return(NULL)"
"0","    "
"0","    # to loop through index & res in order to set to 0 or NA ages not included"
"0","    # in updated estimates post the initial estimate"
"0","    out <- Map(f = function(i, x) {"
"0","      "
"0","      # if (!i %in% 0:4) return(NULL)"
"0","      if (is.null(x)) return(NULL)"
"0","      if (!i %in% 0:4) return(NULL)"
"0","      # if (!i %in% 0:4) return(rep(NA, times = 6))"
"0","      # if (is.null(x)) return(rep(NA, times = length(x[, s])))"
"0","        "
"0","      # to preserve ages as names post call to switch()"
"0","      nms <- names(x[, s])"
"0","        "
"0","      # to hold results of switch()"
"0","      r <- NA"
"0","      "
"0","      # variable to be repeated within switch(); likely will be 0 but could"
"0","      # decide to use NA"
"0","      v <- 0L"
"0","      # v <- NA_integer_"
"0","       "
"0","      # because after the initial estimate is made, not every age is updated,"
"0","      # for example in year + 1 (where year is the first year of the estimate)"
"0","      # only ages 3-6 are updated (thus 1:4; 1:3; 1:2, etc); default (i.e.,"
"0","      # anything greater then 4 years post initial estimate) is to use age 3"
"0","      # only but it really doesn't matter as anything beyond year + 4 is not"
"0","      # updated (10-Jun-2020)"
"0","      switch ("
"0","        EXPR = as.character(i),"
"0","        `0` = r <- x[, s],"
"0","        `1` = r <- c(x[1:4, s], rep(v, times = 2)),"
"0","        `2` = r <- c(x[1:3, s], rep(v, times = 3)),"
"0","        `3` = r <- c(x[1:2, s], rep(v, times = 4)),"
"0","        `4` = r <- c(x[1, s], rep(v, times = 5)),"
"0","        # r <- c(x[1, s], rep(v, times = 5))"
"0","        r <- c(rep(NA, times = 6))"
"0","      )"
"0","        "
"0","      # to preserve ages as names"
"0","      names(r) <- nms"
"0","      r"
"0","      "
"0","    }, index, res)"
"0","    # end Map"
"0","    "
"0","    names(out) <- names(res)"
"0","    "
"0","    # to output neatly as a matrix with ages x years (initial & updates)"
"0","    # do.call(what = cbind, args = lapply(res, function(x) x[, s]))"
"0","    do.call(what = cbind, args = out)"
"0","    "
"0","  })"
"0","  # end final inner lapply"
"0","})"
"0","# end outer lapply"
"0",""
