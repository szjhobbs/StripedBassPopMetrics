"0",""
"0","# chunk assigns ages to non-aged fish using available age-length data"
"0",""
"0","creel$BySex <- lapply(creel[[""BySex""]], FUN = function(d) {"
"0","  "
"0","  d$Data <- lapply(d[[""Data""]], FUN = function(dd) {"
"0",""
"0","    r <- range(dd[[""ForkLen""]], na.rm = TRUE)"
"0","    lb <- seq(from = r[[1]], to = r[[2]] + 1, by = 1)"
"0",""
"0","    # assign ages to each fish - need to employee `set.seed` but how"
"0","    # set.seed(seed = 456)"
"0","    a <- AgeEach(data = dd, len = ForkLen, age = Age, lenBreaks = lb)"
"0",""
"0","    # check for which ages are still NA post call to AgeEach()"
"0","    b_age_na <- is.na(a[[""Ages""]])"
"0","    "
"0","    # now check if any ages are still NA, if yes then employ AgeAssign"
"0","    if (any(b_age_na)) {"
"0","      "
"0","      # create len-frequency where ages are missing (NA)"
"0","      lf <- table(dd[b_age_na, ""ForkLen""], useNA = ""ifany"")"
"0","      "
"0","      # if there is len-freq, then attempt to assign ages"
"0","      if (dim(lf) != 0) {"
"0","        "
"0","        # used to keep order in tact with `o`"
"0","        ord <- lapply(names(lf), FUN = function(x) {"
"0","          which(dd[b_age_na, ""ForkLen""] %in% as.numeric(x))"
"0","        })"
"0","        "
"0","        # does not work properly without call to `order()`"
"0","        ord <- order(unlist(ord, use.names = FALSE))"
"0","    "
"0","        age_assign <- mapply("
"0","          FUN = AgeAssign,"
"0","          len = names(lf),"
"0","          size = lf,"
"0","          MoreArgs = list(alk = qalk, setSeed = 123),"
"0","          SIMPLIFY = FALSE"
"0","        )"
"0","        "
"0","        # unlist to get vector of ages"
"0","        age_assign <- unlist(age_assign, use.names = FALSE)[ord]"
"0","        "
"0","        # re-assign to original age vector"
"0","        a[[""Ages""]][b_age_na] <- age_assign"
"0","      }"
"0","      # end dim check"
"0","      "
"0","    }"
"0","    # end any NA check"
"0","    "
"0","    # now recheck with ages are still NA"
"0","    b_age_na <- is.na(a[[""Ages""]])"
"0","    "
"0","    # use proportion of remaining ages to assign any un-aged"
"0","    if (any(b_age_na)) {"
"0","      "
"0","      pt <- prop.table(table(a[[""Ages""]]))"
"0","      "
"0","      sampled_ages <- sample("
"0","        as.numeric(names(pt)),"
"0","        size = sum(b_age_na),"
"0","        replace = TRUE,"
"0","        prob = pt"
"0","      )"
"0","      "
"0","      a[[""Ages""]][b_age_na] <- sampled_ages"
"0","    }"
"0","    "
"0","    # assign ages back to dataframe"
"0","    dd$Ages <- a[[""Ages""]]"
"0","    dd"
"0","  })"
"0","  # end inner lapply"
"0","  d"
"0","})"
"0","# end outer lapply"
"0",""
