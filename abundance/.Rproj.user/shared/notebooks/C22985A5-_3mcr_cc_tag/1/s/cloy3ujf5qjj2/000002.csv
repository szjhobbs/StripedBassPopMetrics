"0",""
"0","catch$AbunTot <- lapply(catch[[""Abundance""]], function(x) {"
"0","  "
"0","  # to get male age-3 abundance for replacing age-3 females per protocol"
"0","  m <- x[[""m""]]"
"0","  "
"0","  Map(f = function(s, l) {"
"0","    Map(f = function(yn, y) {"
"0",""
"0","      # because for females we replace age-3 values with male age-3 values"
"0","      if (s %in% ""f"") {"
"0","        "
"0","        lapply(c(""N"", ""Var"", ""CI"", ""SE""), FUN = function(v) {"
"0","          "
"0","          mm <- m[[yn]][[v]]"
"0","          "
"0","          if (is.matrix(y[[v]]) && is.matrix(mm))"
"0","            y[[v]][""3"", ] <<- mm[""3"", ]"
"0","          else"
"0","            y[[v]][[""3""]] <<- mm[[""3""]]"
"0","        })"
"0","        # end lapply"
"0","      }"
"0","      # end if"
"0","      "
"0","      # convert to matrix for colSums because initial bay creel estimate is not"
"0","      # a matrix"
"0","      nn <- as.matrix(y[[""N""]])"
"0","      "
"0","      # to get total abundance estimate"
"0","      nnn <- colSums(nn)"
"0","      "
"0","      # the total variance | standard error | confidence interval"
"0","      citot <- sqrt(colSums(as.matrix(y[[""Var""]]))) * y[[""Z""]]"
"0","      "
"0","      # output"
"0","      rbind("
"0","        NTot = nnn,"
"0","        NLeg = nnn - (0.5 * nn[""3"", ]),"
"0","        # Age3 = nn[""3"", ],"
"0","        # CITot = sqrt(colSums(as.matrix(y[[""Var""]]))) * y[[""Z""]]"
"0","        CITot = citot,"
"0","        NTotL = nnn - citot,"
"0","        NTotU = nnn + citot"
"0","      )"
"0","      "
"0","    }, yn = names(l), y = l)"
"0","    # end second Map"
"0","    "
"0","  }, s = names(x), l = x)"
"0","  # end first Map"
"0","})"
"0","# end lapply"
"0",""
"0","# for the convenience of plotting lower & upper bounds for 2010-2019"
"0","catch$AbunLowUpBounds <- t(vapply(catch[[""AbunTot""]], FUN = function(y) {"
"0","  "
"0","  # to loop through male & female list"
"0","  sex <- c(m = 'm', f = 'f')"
"0","  "
"0","  r <- vapply(sex, FUN = function(s) {"
"0","    "
"0","    # to get the final update given the estimate year; getting for now the lower"
"0","    # & upper limits for plotting - not going to plot the point estimate"
"0","    l <- y[[s]]"
"0","    yy <- max(names(l))"
"0","    l[[yy]][c(""NTotL"", ""NTotU""), ""UBay""]"
"0","    "
"0","  }, FUN.VALUE = numeric(2L))"
"0","  # end inner vapply"
"0","  "
"0","  # for the convenience of having a named vector as output"
"0","  dn <- dimnames(r)"
"0","  nm <- paste("
"0","    rep(dn[[1]], times = 2),"
"0","    rep(dn[[2]], each = 2), "
"0","    sep = ""_"""
"0","  )"
"0","  "
"0","  # convert r (a 2x2 matrix to vector length = 4) & name all 4 elements"
"0","  r <- c(r)"
"0","  names(r) <- nm"
"0","  r"
"0","  "
"0","}, FUN.VALUE = numeric(4L)))"
"0","# end outer vapply"
"0",""
